---
title: "REPORT: DNA METHYLATION ANALYSIS"
format: html
embed-resources: true	

server: shiny
params:
  path_to_Samples_on_array_excel: "W:/GENOMICS_UNIT/SampleDB/Samples_on_array_last.xls"
  path_to_SDNA.xls: "W:/GENOMICS_UNIT/DBB/SDNA.xls"
  path_to_storage: "/ijc/LABS/GENOMICS/RAW/Arrays/"
  path_to_LTS: "/ijc/LABS/GENOMICS/LTS" 
  par: 1 # test placeholder
  report_name: "default" # name to show as the first header
  qc_include_analyst: "true" # include qc section for analyst
  qc_include_collab: "false" # not qc section for collab
  corrplot_include: "true" #Include corrplots
  parameter_tunning_plots: "true" # include parameter tuning section
  code_fold: false
  show_warning: true
  shows_message: true
  values_row: '[{"data_names":"ex","data_paths":"samplesheet.rds","arraytype":"EPIC","norm":"noob","project_name":"Methylation","mDiffDMP":"0.01","p.valueDMP":"value","fdrDMR":"value","mdiffDMR":"value","min.cpgDMR":"value"}]'
  paths: '{"results_folder":["results/"],"qc_folder":["results/ex_EPIC/QC/"],"ss_clean_path":["analysis/ex_EPIC"],"bplots_folder":["results/ex_EPIC/plots/pca/bplots/"],"corrplot_folder":["results/ex_EPIC/plots/pca/corrplot/"],"dmp_folder":["results/ex_EPIC/dmps/"],"dmpplots_folder":["results/ex_EPIC/dmps/"],"dmrs_folder":["results/ex_EPIC/dmrs/"],"pathway_folder":["results/ex_EPIC/gopath/"],"report_folder":["results/ex_EPIC/reports/"],"sexplot_folder":["results/ex_EPIC/plots/sex/"],"heatmap_folder":["results/ex_EPIC/plots/heatmap/"]}'
---

```{r}
#| include: false
library(data.table)
library(shiny)
library(DT)
library(rmarkdown)
```

```{r dtable function}
#| include: false
#| eval: true
# Define a function to create a DataTable with download buttons
dtable <- function(data) {
  
   formatted_data <- data
  for (i in which(sapply(data, is.numeric))) {
    formatted_data[[i]] <- formatC(data[[i]], digits = 10)
  }
  
  
  DT::datatable(
    { formatted_data },
    filter = 'top',
    fillContainer = FALSE,
    extensions = 'Buttons',
    options = list(
      paging = TRUE,
      pageLength = 10,
      searching = TRUE,
      fixedColumns = TRUE,
      autoWidth = FALSE,
      scrollX = TRUE,
      digits = 4,
      ordering = TRUE,
      dom = 'Bfrtip',
      buttons = list(
        list(
          extend = "collection",
          text = 'download entire dataset',
          action = DT::JS("function ( e, dt, node, config ) {
                                            Shiny.setInputValue('test', true, {priority: 'event'});
                                            }")
        ),
        'copy',
        'csv',
        'excel'
      ),
      class = "display",
      server = TRUE
    ),
  ) |> DT::formatRound(which(sapply(formatted_data, is.double)), 4)
}
```

```{r dtable function server}
#| include: false
#| eval: true
#| context: server

# Define a function to render DataTable and handle download events
renderDT <- function(data) {
  # Localize data to potentially improve loading speed
  local({
    # Assign data to a variable
    my_data <- data
    
    # Render DataTable
    output$dtable <- DT::renderDataTable({
      dtable(my_data)
    })
    
    # Observe event to show modal when 'test' is triggered
    shiny::observeEvent(input$test, {
      print("hello")
      showModal(myModal())
    })

    # Download handler for CSV
    output$download1 <- shiny::downloadHandler(
      filename = function() {
        paste("data-", Sys.Date(), ".csv", sep="")
      },
      content = function(file) {
        write.csv(my_data, file)
      }
    )

    # Download handler for Excel
    output$download2 <- shiny::downloadHandler(
      filename = function() {
        paste("data-", Sys.Date(), ".xlsx", sep="")
      },
      content = function(file) {
        writexl::write_xlsx(my_data, file)
      }
    )
  })
}

# Load necessary libraries
library(targets)
library(DT)
```

# \[`r params$report_name` version\]

```{r}
#| include: false
# Load necessary libraries
library(targets)
library(minfi)
```

```{r load values, asis}
# Load values from JSON
values_row <- jsonlite::fromJSON(params$values_row)

project_name<-values_row[,'project_name']

```

Project: `r project_name`

Platform: EPIC

Date: `r format(Sys.time(), '%B %d, %Y')`

# Description

`r idx = 0`

Detection and characterization of epigenetic changes between different conditions, genes potentially affected, and pathways involved. This report has been produced with Epipe, an analysis pipeline for DNA methylation microarrays. Epipe is freely available from [Github](https://github.com/ijcBIT/epipe).

# 0. Set-up check

Check the configuration introduced by the user in the `values` data.frame (no empty fields allowed):

```{r}
# Load values from JSON
values_row <- jsonlite::fromJSON(params$values_row)

# Display the values
knitr::kable(subset(values_row, select=-project_name),format = "html")
```

```{r load paths}
# Load paths from JSON
paths <- jsonlite::fromJSON(params$paths)

```

```{r load ss,interactive=TRUE}
# # Localize sample sheet to potentially improve loading speed
# local({
#   # Load sample sheet
#   eval(
#    substitute(
#      ss <- tar_read(ss_array),
#      env = list(ss_array=paste0("ss_",values_row$data_names))
#      )
#    )
#    
#   
#   #ss<-readRDS("inst/extdata/EPICv2/sample_sheet_EPICv2.rds")
#   
#   # Display the sample sheet using the custom DataTable function
#   dtable(ss)
# })
```

```{r child_qc_analyst}
#| results: asis
#| echo: false
#| include: !expr params$qc_include_analyst

# paths <- jsonlite::fromJSON(params$paths)

cat("\n")
a <- knitr::knit_child('_qmd/_quality_control_analyst.qmd', quiet = TRUE)
cat(a, sep = "\n")


```

```{r child_qc_analyst_collab}
#| results: asis
#| echo: false
#| include: !expr params$qc_include_collab

# paths <- jsonlite::fromJSON(params$paths)

cat("\n")
a <- knitr::knit_child('_qmd/_quality_control_collab.qmd', quiet = TRUE)
cat(a, sep = "\n")

```


```{r child_exploratory_analysis}
#| results: asis
#| echo: false
#| include: true

#!expr params$corrplot_include

# paths <- jsonlite::fromJSON(params$paths)
cat("\n")
b <- knitr::knit_child('_qmd/_exploratory_analysis.qmd', quiet = TRUE)
cat(b, sep = "\n")


```

```{r DMPs}
#| results: asis
#| echo: false
#| include: true

# paths <- jsonlite::fromJSON(params$paths)
cat("\n")
c <- knitr::knit_child('_qmd/_DMPs.qmd', quiet = TRUE)
cat(c, sep = "\n")

```

```{r DMRs}
#| results: asis
#| echo: false
#| include: true

# paths <- jsonlite::fromJSON(params$paths)
cat("\n")
d <- knitr::knit_child('_qmd/_DMRs.qmd', quiet = TRUE)
cat(d, sep = "\n")
#N<-NULL
```
